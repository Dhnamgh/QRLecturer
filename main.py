import streamlit as st
import qrcode
from PIL import Image
import random
import string
import time
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import json
import io

# ===================== C·∫§U H√åNH GOOGLE SHEET =====================
def get_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_dict = json.loads(os.environ["GOOGLE_CREDENTIALS"])
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key("1sWG3jE8lDezfmGcEQgdRCRSBXxNjj9Xz").worksheet("D25A")
    return sheet

# ===================== CHU·∫®N H√ìA H·ªå T√äN =====================
def normalize_name(name):
    return ' '.join(word.capitalize() for word in name.strip().split())

# ===================== SINH M√É QR ƒê·ªòNG =====================
def generate_token():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))

def generate_qr_image(buoi):
    token = generate_token()
    timestamp = int(time.time())
    link = f"https://diemdanh.app/?buoi={buoi}&token={token}&timestamp={timestamp}"
    qr = qrcode.make(link)
    return qr, token, timestamp

def is_token_valid(token, timestamp, expiry=30):
    return int(time.time()) - int(timestamp) <= expiry

# ===================== GHI ƒêI·ªÇM DANH =====================
def mark_attendance(buoi, mssv, hoten):
    sheet = get_sheet()
    data = sheet.get_all_records()
    col_diemdanh = sheet.find(buoi).col
    col_thoigian = sheet.find(f"Th·ªùi gian {buoi[-1]}").col

    for i, row in enumerate(data):
        if str(row["MSSV"]) == str(mssv) and normalize_name(row["H·ªç v√† T√™n"]) == hoten:
            sheet.update_cell(i+2, col_diemdanh, "C√≥")
            sheet.update_cell(i+2, col_thoigian, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            return True
    return False

# ===================== TH·ªêNG K√ä =====================
def get_attendance_stats(buoi):
    sheet = get_sheet()
    data = sheet.get_all_records()
    diem_danh = sum(1 for row in data if row.get(buoi) == "C√≥")
    vang = sum(1 for row in data if row.get(buoi) != "C√≥")
    ds_vang = [row for row in data if row.get(buoi) != "C√≥"]
    return {
        "diem_danh": diem_danh,
        "vang": vang,
        "ds_vang": ds_vang
    }

# ===================== GIAO DI·ªÜN STREAMLIT =====================
st.set_page_config(page_title="ƒêi·ªÉm danh sinh vi√™n", layout="centered")
tab_gv, tab_sv = st.tabs(["üë©‚Äçüè´ Gi·∫£ng vi√™n", "üì≤ Sinh vi√™n ƒëi·ªÉm danh"])

# --------------------- GI·∫¢NG VI√äN ---------------------
with tab_gv:
    st.header("üîê T·∫°o m√£ QR ƒëi·ªÉm danh")
    buoi_hien_thi = st.selectbox("Ch·ªçn bu·ªïi h·ªçc", ["Bu·ªïi 1", "Bu·ªïi 2", "Bu·ªïi 3", "Bu·ªïi 4", "Bu·ªïi 5", "Bu·ªïi 6"])
    buoi = buoi_hien_thi  # d√πng tr·ª±c ti·∫øp t√™n c·ªôt

    if st.button("üéØ T·∫°o m√£ QR ƒë·ªông"):
        qr_img, token, timestamp = generate_qr_image(buoi)
        buf = io.BytesIO()
        qr_img.save(buf, format="PNG")
        st.image(buf.getvalue(), caption="M√£ QR ƒëi·ªÉm danh (c√≥ hi·ªáu l·ª±c trong 30 gi√¢y)")
        st.session_state["token"] = token
        st.session_state["timestamp"] = timestamp
        st.session_state["buoi"] = buoi

    if "buoi" in st.session_state:
    st.subheader("üìä Th·ªëng k√™ ƒëi·ªÉm danh")
    try:
        stats = get_attendance_stats(st.session_state["buoi"])
        st.metric("‚úÖ ƒê√£ ƒëi·ªÉm danh", stats["diem_danh"])
        st.metric("‚ùå V·∫Øng m·∫∑t", stats["vang"])
        st.write("üìã Danh s√°ch v·∫Øng:")
        st.dataframe(stats["ds_vang"])
    except Exception as e:
        st.error(f"‚ùå L·ªói khi l·∫•y th·ªëng k√™: {e}")

# --------------------- SINH VI√äN ---------------------
with tab_sv:
    st.header("üì≤ Sinh vi√™n ƒëi·ªÉm danh")
    mssv = st.text_input("Nh·∫≠p MSSV")
    hoten = st.text_input("Nh·∫≠p h·ªç v√† t√™n")

    if st.button("‚úÖ X√°c nh·∫≠n ƒëi·ªÉm danh"):
        buoi = st.session_state.get("buoi")
        token = st.session_state.get("token")
        timestamp = st.session_state.get("timestamp")

        if not mssv.isdigit():
            st.warning("‚ö†Ô∏è MSSV ph·∫£i l√† s·ªë.")
        elif not is_token_valid(token, timestamp):
            st.error("‚ùå M√£ QR ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá.")
        else:
            hoten_chuan = normalize_name(hoten)
            success = mark_attendance(buoi, mssv, hoten_chuan)
            if success:
                st.success(f"‚úÖ ƒêi·ªÉm danh th√†nh c√¥ng l√∫c {datetime.now().strftime('%H:%M:%S')}")
            else:
                st.error("‚ùå MSSV ho·∫∑c h·ªç t√™n kh√¥ng kh·ªõp v·ªõi danh s√°ch.")

