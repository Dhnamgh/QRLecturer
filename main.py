import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
import qrcode
from PIL import Image
import io
import time
import urllib.parse
import re
import base64
import unicodedata
from difflib import get_close_matches
import datetime  # d√πng module chu·∫©n ƒë·ªÉ tr√°nh shadow
def current_slot(now=None, step=30):
    import time as _t
    return int((_t.time() if now is None else now) // step)

def token_valid(t_str: str, step=30, strict=True) -> bool:
    # strict=True: b·∫Øt bu·ªôc ƒë√∫ng slot hi·ªán t·∫°i (kh√¥ng ¬±1)
    if not t_str or not str(t_str).isdigit():
        return False
    t = int(t_str)
    now_slot = current_slot(step=step)
    if strict:
        return t == now_slot
    # l·ª° m·∫°ng tr·ªÖ c√≥ th·ªÉ n·ªõi l·ªèng ¬±1 (kh√¥ng khuy·∫øn ngh·ªã)
    return abs(t - now_slot) <= 1

# ===================== C·∫§U H√åNH GOOGLE SHEETS =====================
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]
SHEET_KEY = "1P7SOGsmb2KwBX50MU1Y1iVCYtjTiU7F7jLqgp6Bl8Bo"  # ID file Sheet c·ªßa b·∫°n
WORKSHEET_NAME = "D25C"  # T√™n sheet con trong Google Sheets
VN_TZ = datetime.timezone(datetime.timedelta(hours=7))

# ===================== GUARD SECRETS V√Ä ƒêƒÇNG NH·∫¨P GV =====================
st.set_page_config(page_title="QR Lecturer", layout="wide")

def _get_teacher_pw():
    # ∆Øu ti√™n root, n·∫øu kh√¥ng c√≥ th√¨ th·ª≠ trong block google_service_account
    if "teacher_password" in st.secrets:
        return st.secrets["teacher_password"]
    if "google_service_account" in st.secrets:
        return st.secrets["google_service_account"].get("teacher_password")
    return None

# Ch·∫∑n ch·∫°y n·∫øu thi·∫øu secrets quan tr·ªçng (tr·ª´ khi v√†o ƒë∆∞·ªùng SV)
_qp_boot = st.query_params if hasattr(st, "query_params") else st.experimental_get_query_params()
_is_sv_boot = (_qp_boot.get("sv") == "1" if isinstance(_qp_boot, dict) else (_qp_boot.get("sv", [""])[0] == "1"))
if not _is_sv_boot:
    missing = []
    if not _get_teacher_pw():
        missing.append("teacher_password")
    if "google_service_account" not in st.secrets:
        missing.append("[google_service_account]")
    if missing:
        st.error("üîí App b·ªã kh√≥a v√¨ thi·∫øu Secrets: " + ", ".join(missing) + ". V√†o Settings ‚Üí Secrets ƒë·ªÉ c·∫•u h√¨nh r·ªìi reload.")
        st.stop()

def gv_unlocked() -> bool:
    return bool(st.session_state.get("gv_unlocked"))

def render_gv_auth():
    if gv_unlocked():
        with st.sidebar:
            st.success("üë®‚Äçüè´ GV: ƒë√£ ƒëƒÉng nh·∫≠p")
            if st.button("ƒêƒÉng xu·∫•t"):
                st.session_state.clear()
                st.rerun()
        return
    with st.sidebar.expander("üîí ƒêƒÉng nh·∫≠p Gi·∫£ng vi√™n", expanded=True):
        pw_input = st.text_input("M·∫≠t kh·∫©u GV", type="password")
        if st.button("ƒêƒÉng nh·∫≠p"):
            if _get_teacher_pw() and pw_input == _get_teacher_pw():
                st.session_state["gv_unlocked"] = True
                st.rerun()
            else:
                st.warning("Sai m·∫≠t kh·∫©u ho·∫∑c ch∆∞a c·∫•u h√¨nh teacher_password trong Secrets.")

# ===================== H√ÄM CHU·∫®N H√ìA PRIVATE KEY & K·∫æT N·ªêI =====================
@st.cache_resource
def _get_gspread_client():
    cred = dict(st.secrets["google_service_account"])
    pk = cred.get("private_key", "")
    if not pk:
        raise RuntimeError("Secrets thi·∫øu private_key.")

    # 1. Chu·∫©n h√≥a xu·ªëng d√≤ng
    if "\\n" in pk:
        pk = pk.replace("\\n", "\n")
    pk = pk.replace("\r\n", "\n").replace("\r", "\n")

    header = "-----BEGIN PRIVATE KEY-----"
    footer = "-----END PRIVATE KEY-----"
    if header not in pk or footer not in pk:
        raise RuntimeError("private_key thi·∫øu header/footer BEGIN/END.")

    # 2. L·ªçc k√Ω t·ª± h·ª£p l·ªá
    lines = [ln.strip() for ln in pk.split("\n")]
    try:
        h_idx = lines.index(header)
        f_idx = lines.index(footer)
    except ValueError:
        raise RuntimeError("ƒê·ªãnh d·∫°ng private_key kh√¥ng h·ª£p l·ªá.")
    body_lines = [ln for ln in lines[h_idx + 1:f_idx] if ln]
    body_raw = re.sub(r"[^A-Za-z0-9+/=]", "", "".join(body_lines))

    # 3. Chu·∫©n h√≥a padding base64
    body = body_raw.replace("=", "")
    if not body:
        raise RuntimeError("private_key r·ªóng sau khi l√†m s·∫°ch.")
    rem = len(body) % 4
    if rem:
        body += "=" * (4 - rem)
    try:
        base64.b64decode(body, validate=True)
    except Exception as e:
        svc = cred.get("client_email", "(kh√¥ng r√µ)")
        raise RuntimeError(f"‚ùå private_key l·ªói base64: {e}\nService Account: {svc}")

    # 4. Gh√©p l·∫°i PEM chu·∫©n
    pk_clean = (
        header + "\n" +
        "\n".join(body[i:i + 64] for i in range(0, len(body), 64)) +
        "\n" + footer + "\n"
    )
    cred["private_key"] = pk_clean

    creds = Credentials.from_service_account_info(cred, scopes=SCOPES)
    return gspread.authorize(creds)

def get_sheet():
    client = _get_gspread_client()
    ss = client.open_by_key(SHEET_KEY)
    return ss.worksheet(WORKSHEET_NAME)

# ===================== TI·ªÜN √çCH =====================
def get_query_params():
    if hasattr(st, "query_params"):
        return dict(st.query_params)
    raw = st.experimental_get_query_params()
    return {k: (v[0] if isinstance(v, list) and v else v) for k, v in raw.items()}

def normalize_name(name: str):
    return " ".join(w.capitalize() for w in name.strip().split())

def strip_accents(s: str) -> str:
    s = unicodedata.normalize("NFD", s)
    s = "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
    return unicodedata.normalize("NFC", s)

def norm_search(s: str) -> str:
    return " ".join(strip_accents(s).lower().split())

def load_records(sheet):
    return sheet.get_all_records(expected_headers=None, default_blank="")

def find_header_col(sheet, header_name):
    return sheet.find(header_name).col

def find_student_candidates(records, query: str):
    q = query.strip()
    if not q:
        return []
    if q.isdigit() and len(q) == 4:
        return [r for r in records if str(r.get("MSSV", "")).strip().endswith(q)]
    qn = norm_search(q)
    contains = [r for r in records if qn in norm_search(r.get("H·ªç v√† T√™n", ""))]
    if contains:
        return contains
    names = [r.get("H·ªç v√† T√™n", "") for r in records]
    name_map = {n: r for n, r in zip(names, records)}
    close = get_close_matches(q, names, n=5, cutoff=0.6)
    if not close:
        names_no = [norm_search(n) for n in names]
        name_map_no = {norm_search(n): n for n in names}
        close_no = get_close_matches(qn, names_no, n=5, cutoff=0.6)
        close = [name_map_no[c] for c in close_no]
    return [name_map[n] for n in close]

def attendance_flag(val):
    return str(val).strip() != ""

# ======= TH·ªúI GIAN B√äN C·∫†NH C·ªòT BU·ªîI =======
def find_or_create_time_col(sheet, buoi_col: int, buoi_header: str) -> int:
    """T√¨m 'Th·ªùi gian ...' ngay b√™n ph·∫£i c·ªôt bu·ªïi; n·∫øu ch∆∞a c√≥ th√¨ t·∫°o."""
    headers = sheet.row_values(1)
    n_cols = len(headers)
    right_col = buoi_col + 1
    # N·∫øu c·ªôt b√™n ph·∫£i ƒë√£ l√† "Th·ªùi gian ..."
    if right_col <= n_cols:
        h = (headers[right_col - 1] or "").lower()
        if ("th·ªùi gian" in h) or ("time" in h):
            return right_col
    # D√≤ theo s·ªë bu·ªïi (Bu·ªïi 1 -> Th·ªùi gian 1)
    m = re.search(r"(\d+)", buoi_header or "", flags=re.I)
    idx = m.group(1) if m else None
    if idx:
        for i, h in enumerate(headers, start=1):
            hl = (h or "").lower()
            if (("th·ªùi gian" in hl) or ("time" in hl)) and re.search(rf"\b{idx}\b", hl):
                return i
    # Kh√¥ng th·∫•y -> t·∫°o ·ªü c·ªôt b√™n ph·∫£i
    sheet.update_cell(1, right_col, f"Th·ªùi gian {buoi_header}")
    return right_col

# ===================== GIAO DI·ªÜN =====================
qp = get_query_params()

# ===================== M√ÄN H√åNH SINH VI√äN =====================
if qp.get("sv") == "1":
    buoi_sv = qp.get("buoi", "Bu·ªïi 1")
    token_qr = qp.get("t", "")  # l·∫•y token t·ª´ QR (ƒë·ªïi m·ªói 30s)
    lock_key = f"locked_{buoi_sv}"
    info_key = f"lock_info_{buoi_sv}"

    st.title("üéì ƒêi·ªÉm danh sinh vi√™n")
    st.info(f"B·∫°n ƒëang ƒëi·ªÉm danh cho **{buoi_sv}**")

    # N·∫øu SV ƒë√£ ƒëi·ªÉm danh trong phi√™n n√†y ‚Üí kh√≥a form
    if st.session_state.get(lock_key):
        st.success(st.session_state.get(info_key, "B·∫°n ƒë√£ ƒëi·ªÉm danh th√†nh c√¥ng."))
        st.stop()

    # üîí Ki·ªÉm tra token h·ª£p l·ªá (ch·ªëng refresh / ƒëi·ªÉm danh h·ªô)
    def current_slot(now=None, step=30):
        import time as _t
        return int((_t.time() if now is None else now) // step)

    def token_valid(t_str: str, step=30, strict=True) -> bool:
        if not t_str or not str(t_str).isdigit():
            return False
        t = int(t_str)
        now_slot = current_slot(step=step)
        if strict:
            return t == now_slot
        return abs(t - now_slot) <= 1  # n·ªõi l·ªèng ¬±1 n·∫øu m·∫°ng tr·ªÖ (kh√¥ng khuy·∫øn kh√≠ch)

    if not token_valid(token_qr, step=30, strict=True):
        st.error("‚è≥ Link ƒëi·ªÉm danh ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá. "
                 "Vui l√≤ng **qu√©t m√£ QR ƒëang chi·∫øu** ƒë·ªÉ m·ªü form m·ªõi.")
        import time as _t
        remain = 30 - (int(_t.time()) % 30)
        st.caption(f"G·ª£i √Ω: m√£ QR ƒë·ªïi sau kho·∫£ng {remain} gi√¢y.")
        st.stop()

    # Form nh·∫≠p (ch·ªâ hi·ªÉn th·ªã khi token c√≤n hi·ªáu l·ª±c)
    mssv = st.text_input("Nh·∫≠p MSSV")
    hoten = st.text_input("Nh·∫≠p h·ªç v√† t√™n")

    if st.button("‚úÖ X√°c nh·∫≠n ƒëi·ªÉm danh", use_container_width=True):
        if not mssv.strip().isdigit():
            st.warning("‚ö†Ô∏è MSSV ph·∫£i l√† s·ªë.")
        elif not hoten.strip():
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p h·ªç v√† t√™n.")
        else:
            try:
                sheet = get_sheet()
                col_buoi = find_header_col(sheet, buoi_sv)
                cell_mssv = sheet.find(str(mssv).strip())

                # Ki·ªÉm tra h·ªç t√™n kh·ªõp
                hoten_sheet = sheet.cell(
                    cell_mssv.row,
                    find_header_col(sheet, "H·ªç v√† T√™n")
                ).value
                if normalize_name(hoten_sheet or "") != normalize_name(hoten):
                    st.error("‚ùå H·ªç t√™n kh√¥ng kh·ªõp v·ªõi MSSV trong danh s√°ch.")
                    st.stop()

                # Ki·ªÉm tra ƒë√£ ƒëi·ªÉm danh ch∆∞a
                curr_mark = (sheet.cell(cell_mssv.row, col_buoi).value or "").strip()
                time_col = find_or_create_time_col(sheet, col_buoi, buoi_sv)
                if curr_mark:
                    exist_time = sheet.cell(cell_mssv.row, time_col).value or ""
                    msg = f"‚úÖ MSSV **{mssv}** ƒë√£ ƒëi·ªÉm danh tr∆∞·ªõc ƒë√≥" + (
                        f" l√∫c **{exist_time}**." if exist_time else ".")
                    st.info(msg)
                    st.session_state[lock_key] = True
                    st.session_state[info_key] = msg
                    st.rerun()

                # Ghi ‚úÖ v√† th·ªùi gian th·ª±c
                sheet.update_cell(cell_mssv.row, col_buoi, "‚úÖ")
                now_str = datetime.datetime.now(VN_TZ).strftime("%Y-%m-%d %H:%M:%S")
                sheet.update_cell(cell_mssv.row, time_col, now_str)

                msg = f"üéâ ƒêi·ªÉm danh th√†nh c√¥ng! MSSV **{mssv}** ({now_str})."
                st.success(msg)
                st.session_state[lock_key] = True
                st.session_state[info_key] = msg
                st.rerun()

            except Exception as e:
                st.error(f"‚ùå L·ªói khi ƒëi·ªÉm danh: {e}")

    st.stop()


# ===================== M√ÄN H√åNH GI·∫¢NG VI√äN (b·∫Øt bu·ªôc ƒëƒÉng nh·∫≠p) =====================
render_gv_auth()  # hi·ªÉn th·ªã kh·ªëi ƒëƒÉng nh·∫≠p ·ªü Sidebar
st.title("üìã H·ªá th·ªëng ƒëi·ªÉm danh QR")

if not gv_unlocked():
    st.error("üîí B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p Gi·∫£ng vi√™n. V√†o **Sidebar ‚Üí ƒêƒÉng nh·∫≠p Gi·∫£ng vi√™n** ƒë·ªÉ m·ªü kh√≥a.")
    st.stop()

tab_gv, tab_search, tab_stats, tab_ai = st.tabs(
    ["üë®‚Äçüè´ Gi·∫£ng vi√™n (QR ƒë·ªông)", "üîé T√¨m ki·∫øm", "üìä Th·ªëng k√™", "ü§ñ Tr·ª£ l√Ω AI"]
)


# ---------- TAB GI·∫¢NG VI√äN ----------
with tab_gv:
    st.subheader("üì∏ T·∫°o m√£ QR ƒëi·ªÉm danh (ƒë·ªông m·ªói 30 gi√¢y)")
    buoi = st.selectbox(
        "Ch·ªçn bu·ªïi h·ªçc",
        ["Bu·ªïi 1", "Bu·ªïi 2", "Bu·ªïi 3", "Bu·ªïi 4", "Bu·ªïi 5", "Bu·ªïi 6"],
        index=0,
        key="buoi_gv_select",
    )
    auto = st.toggle("T·ª± ƒë·ªïi QR m·ªói 30 gi√¢y", value=True)
    show_link = st.toggle("üîé Hi·ªÉn th·ªã link chi ti·∫øt (·∫©n/hi·ªán)", value=False)
    go = st.button("T·∫°o m√£ QR", use_container_width=True, type="primary")

    if go:
        qr_slot = st.empty()
        link_slot = st.empty()
        timer_slot = st.empty()
        try:
            while True:
                now = int(time.time())
                slot = now // 30
                token = f"{slot}"
                base_url = st.secrets["google_service_account"].get("app_base_url", "https://qrlecturer.streamlit.app")
                qr_data = f"{base_url}/?sv=1&buoi={urllib.parse.quote(buoi)}&t={token}"

                # QR image
                qr = qrcode.make(qr_data)
                buf = io.BytesIO(); qr.save(buf, format="PNG"); buf.seek(0)
                img = Image.open(buf)
                qr_slot.image(img, caption="üì± Qu√©t m√£ ƒë·ªÉ ƒëi·ªÉm danh", width=260)

                if show_link:
                    with link_slot.container():
                        st.markdown(f'<a href="{qr_data}" target="_blank" rel="noopener noreferrer">üåê M·ªü link hi·ªán t·∫°i</a>', unsafe_allow_html=True)
                        st.code(qr_data)
                else:
                    link_slot.empty()

                remain = 30 - (now % 30)
                timer_slot.markdown(f"‚è≥ QR ƒë·ªïi sau: **{remain} gi√¢y**  ‚Ä¢  Bu·ªïi: **{buoi}**")

                if not auto:
                    break
                time.sleep(1)
        except Exception as e:
            st.error(f"‚ùå L·ªói khi t·∫°o QR: {e}")

# ---------- TAB T√åM KI·∫æM ----------
with tab_search:
    st.subheader("üîé T√¨m sinh vi√™n (4 s·ªë cu·ªëi MSSV ho·∫∑c h·ªç v√† t√™n)")
    q = st.text_input("Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm", placeholder="VD: 1234 ho·∫∑c 'Nguyen Van A'")
    run = st.button("T√¨m", use_container_width=True)
    if run and q.strip():
        try:
            sheet = get_sheet()
            records = load_records(sheet)
            results = find_student_candidates(records, q)
            if not results:
                st.warning("üôÅ Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.")
            else:
                st.success(f"T√¨m th·∫•y {len(results)} k·∫øt qu·∫£:")
                show_cols = list(records[0].keys()) if records else []
                pref = ["MSSV", "H·ªç v√† T√™n", "T·ªï"]
                buoi_cols = [c for c in show_cols if c.lower().startswith("bu·ªïi ")]
                cols = [c for c in pref if c in show_cols] + buoi_cols
                tidy = []
                for r in results:
                    row = {c: r.get(c, "") for c in cols}
                    for bc in buoi_cols:
                        row[bc] = "‚úÖ" if attendance_flag(r.get(bc, "")) else ""
                    tidy.append(row)
                st.dataframe(tidy, use_container_width=True)
        except Exception as e:
            st.error(f"‚ùå L·ªói khi t√¨m ki·∫øm: {e}")

# ---------- TAB TH·ªêNG K√ä ----------
with tab_stats:
    st.subheader("üìä Th·ªëng k√™ ƒëi·ªÉm danh theo bu·ªïi & theo T·ªï")
    try:
        sheet = get_sheet()
        headers = sheet.row_values(1)
        buoi_list = [h for h in headers if h.lower().startswith("bu·ªïi ")]
        buoi_chon = st.selectbox("Ch·ªçn bu·ªïi", buoi_list or ["Bu·ªïi 1"], index=0)
        records = load_records(sheet)

        present, absent = 0, 0
        by_group = {}
        for r in records:
            flag = attendance_flag(r.get(buoi_chon, ""))
            if flag:
                present += 1
            else:
                absent += 1
            group = str(r.get("T·ªï", "")).strip() or "Ch∆∞a r√µ"
            if group not in by_group:
                by_group[group] = {"present": 0, "absent": 0}
            by_group[group]["present" if flag else "absent"] += 1

        # Ch·ªâ s·ªë t·ªïng quan
        c1, c2, c3 = st.columns(3)
        with c1: st.metric("‚úÖ C√≥ m·∫∑t", present)
        with c2: st.metric("‚ùå V·∫Øng", absent)
        with c3:
            total = present + absent
            st.metric("üìà T·ª∑ l·ªá c√≥ m·∫∑t", f"{(present/total*100):.1f}%" if total else "-")

        # Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
        rows = []
        for g, v in sorted(by_group.items()):
            total_g = v["present"] + v["absent"]
            rate = (v["present"]/total_g*100) if total_g else 0.0
            rows.append({
                "T·ªï": g,
                "C√≥ m·∫∑t": v["present"],
                "V·∫Øng": v["absent"],
                "T·ªïng": total_g,
                "T·ª∑ l·ªá (%)": round(rate, 1),
                "Nh√£n": f"{v['present']} ({rate:.1f}%)"
            })
        import pandas as pd  # an to√†n n·∫øu b·∫°n qu√™n import tr√™n ƒë·∫ßu
        import altair as alt
        df = pd.DataFrame(rows)

        # Bi·ªÉu ƒë·ªì c·ªôt: m·ªói t·ªï m·ªôt m√†u + tooltip + nh√£n
        if not df.empty:
            base = alt.Chart(df).encode(
                x=alt.X('T·ªï:N', sort=None, title='T·ªï'),
                y=alt.Y('C√≥ m·∫∑t:Q', title='S·ªë SV c√≥ m·∫∑t'),
                color=alt.Color('T·ªï:N', legend=None),
                tooltip=[
                    alt.Tooltip('T·ªï:N', title='T·ªï'),
                    alt.Tooltip('C√≥ m·∫∑t:Q', title='C√≥ m·∫∑t'),
                    alt.Tooltip('V·∫Øng:Q', title='V·∫Øng'),
                    alt.Tooltip('T·ªïng:Q', title='T·ªïng'),
                    alt.Tooltip('T·ª∑ l·ªá (%):Q', title='T·ª∑ l·ªá (%)')
                ]
            )
            bars = base.mark_bar()
            text = base.mark_text(dy=-5).encode(text='Nh√£n:N')
            chart = (bars + text).properties(height=340)
            st.altair_chart(chart, use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")

        # B·∫£ng th·ªëng k√™ d∆∞·ªõi bi·ªÉu ƒë·ªì
        table = []
        for g, v in sorted(by_group.items()):
            total_g = v["present"] + v["absent"]
            rate_g = f"{(v['present']/total_g*100):.1f}%" if total_g else "-"
            table.append({"T·ªï": g, "C√≥ m·∫∑t": v["present"], "V·∫Øng": v["absent"], "T·ª∑ l·ªá c√≥ m·∫∑t": rate_g})
        st.dataframe(table, use_container_width=True)

    except Exception as e:
        st.error(f"‚ùå L·ªói khi l·∫•y th·ªëng k√™: {e}")
# ---------- TAB TR·ª¢ L√ù AI (n√¢ng c·∫•p) ----------
with tab_ai:
    st.subheader("ü§ñ Tr·ª£ l√Ω AI")
    st.caption(
        "V√≠ d·ª•: ‚ÄúBu·ªïi 3 c√≥ bao nhi√™u SV ƒëi h·ªçc?‚Äù, ‚ÄúT·ªï 2 bu·ªïi 5 c√≥ bao nhi√™u SV c√≥ m·∫∑t?‚Äù, "
        "‚ÄúAi ƒëi h·ªçc s·ªõm nh·∫•t bu·ªïi 2?‚Äù, ‚ÄúAi ƒë·∫øn mu·ªôn nh·∫•t bu·ªïi 4?‚Äù, "
        "‚ÄúBu·ªïi 1 Th√°i c√≥ ƒëi h·ªçc kh√¥ng?‚Äù, ‚ÄúMSSV 5112xxxx ƒëi m·∫•y bu·ªïi?‚Äù, ‚ÄúNguyen Van A c√≥ v·∫Øng kh√¥ng?‚Äù"
    )

    q_raw = st.text_input("C√¢u h·ªèi c·ªßa b·∫°n", placeholder="Nh·∫≠p c√¢u h·ªèi ti·∫øng Vi·ªát (c√≥ th·ªÉ g√µ kh√¥ng d·∫•u)...")

    # ===== Helpers NLP (kh√¥ng d√πng th∆∞ vi·ªán ngo√†i) =====
    def lv_norm(s):
        import unicodedata, re
        s = (s or "").strip().lower()
        s = unicodedata.normalize("NFD", s)
        s = "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
        s = unicodedata.normalize("NFC", s)
        s = re.sub(r"\s+", " ", s)
        return s

    def fuzzy_has(text_norm, variants, thresh=0.8):
        from difflib import SequenceMatcher
        for v in variants:
            v2 = lv_norm(v)
            if v2 in text_norm:
                return True
            if SequenceMatcher(None, text_norm, v2).ratio() >= thresh:
                return True
        return False

    def extract_buoi(text_norm, buoi_cols):
        import re
        # kh·ªõp tr·ª±c ti·∫øp theo t√™n c·ªôt (kh√¥ng d·∫•u)
        for b in buoi_cols:
            if lv_norm(b) in text_norm:
                return b
        # kh·ªõp "buoi <so>"
        m = re.search(r"buoi\s*(\d+)", text_norm)
        if m:
            num = m.group(1)
            for b in buoi_cols:
                if re.search(rf"\b{num}\b", lv_norm(b)):
                    return b
        return None

    def extract_to(text_norm):
        import re
        m = re.search(r"\bto\s*([a-z0-9]+)\b", text_norm)
        return m.group(1) if m else None

    def looks_like_mssv(s):
        import re
        s = re.sub(r"\D", "", s or "")
        return len(s) >= 7

    def extract_mssv(text_norm):
        import re
        m = re.search(r"(?:mssv|sv|student)\s*([0-9]{6,})", text_norm)
        if m: return m.group(1)
        m2 = re.search(r"\b([0-9]{7,})\b", text_norm)
        return m2.group(1) if m2 else None

    def find_student_row(records, mssv_or_name):
        # ∆∞u ti√™n MSSV
        import re
        if looks_like_mssv(mssv_or_name):
            ms = re.sub(r"\D", "", mssv_or_name)
            for r in records:
                if re.sub(r"\D", "", str(r.get("MSSV",""))) == ms:
                    return r
        # t√™n g·∫ßn ƒë√∫ng (kh√¥ng d·∫•u)
        target = lv_norm(mssv_or_name)
        names = [r.get("H·ªç v√† T√™n","") for r in records]
        name_map = {n: r for n, r in zip(names, records)}
        for n in names:
            if target and target in lv_norm(n):
                return name_map[n]
        from difflib import get_close_matches
        cand = get_close_matches(mssv_or_name, names, n=1, cutoff=0.6)
        return name_map[cand[0]] if cand else None

    def extract_name_candidate(text_norm):
        import re
        stop = {
            "buoi","bu·ªïi","to","t·ªï","mssv","sv","student",
            "di","ƒëi","hoc","h·ªçc","co","c√≥","mat","m·∫∑t","vang","v·∫Øng",
            "khong","kh√¥ng","ai","nhat","nh·∫•t","som","s·ªõm","muon","mu·ªôn",
            "den","ƒë·∫øn","tre","tr·ªÖ","bao","nhiu","nhieu","bao nhieu",
            "ty","le","ty le","chuyen","can","chuy√™n","c·∫ßn","trung","binh","trung binh",
            "la","l√†","khong di","co di","khong co mat"
        }
        tokens = re.findall(r"[a-zA-Z√Ä-·ªπ0-9]+", text_norm)
        remain = [t for t in tokens if t not in stop and not t.isdigit()]
        name = " ".join(remain).strip()
        return name if name else None

    def find_time_col_index(headers, buoi_col, buoi_header):
        import re
        n = len(headers)
        nxt = buoi_col + 1
        if nxt <= n:
            h = (headers[nxt - 1] or "").lower()
            if "th·ªùi gian" in h or "time" in h:
                return nxt
        m = re.search(r"(\d+)", buoi_header or "", flags=re.I)
        idx = m.group(1) if m else None
        if idx:
            for i, h in enumerate(headers, start=1):
                hl = (h or "").lower()
                if (("th·ªùi gian" in hl) or ("time" in hl)) and re.search(rf"\b{idx}\b", hl):
                    return i
        return None

    def parse_time(val):
        if not val: return None
        val = str(val).strip()
        fmts = ["%Y-%m-%d %H:%M:%S", "%d/%m/%Y %H:%M:%S", "%H:%M:%S", "%H:%M"]
        for fmt in fmts:
            try:
                dt = datetime.datetime.strptime(val, fmt)
                if fmt in ("%H:%M:%S", "%H:%M"):
                    today = datetime.datetime.now(VN_TZ).date()
                    dt = datetime.datetime.combine(today, dt.time())
                return dt.replace(tzinfo=VN_TZ)
            except Exception:
                continue
        return None

    def answer(q_user):
        import re
        from difflib import get_close_matches

        qn = lv_norm(q_user)
        sheet = get_sheet()
        records = load_records(sheet)
        if not records:
            return "Kh√¥ng c√≥ d·ªØ li·ªáu trong Sheet."

        headers = sheet.row_values(1)
        buoi_cols = [h for h in headers if lv_norm(h).startswith("buoi ")]
        if not buoi_cols:
            return "Kh√¥ng t√¨m th·∫•y c√°c c·ªôt 'Bu·ªïi ...' trong Sheet."

        total_sv = len(records)
        def col_idx_of(header_name):  # 1-based
            return headers.index(header_name) + 1

        # ------ Intent: s·ªõm nh·∫•t / mu·ªôn nh·∫•t ------
        ask_earliest = fuzzy_has(qn, ["som nhat", "s·ªõm nh·∫•t", "di hoc som nhat", "den som nhat", "som nhut", "somnha"])
        ask_latest   = fuzzy_has(qn, ["muon nhat", "mu·ªôn nh·∫•t", "den muon nhat", "den tre nhat", "tre nhat"])
        if ask_earliest or ask_latest:
            b = extract_buoi(qn, buoi_cols) or buoi_cols[-1]
            b_col = col_idx_of(b)
            t_col = find_time_col_index(headers, b_col, b)
            if not t_col:
                return f"Kh√¥ng t√¨m th·∫•y c·ªôt th·ªùi gian ·ª©ng v·ªõi ‚Äú{b}‚Äù."

            best_row, best_time = None, None
            for r_idx, r in enumerate(records, start=2):
                if not str(r.get(b,"")).strip():  # ch·ªâ x√©t ƒë√£ ‚úÖ
                    continue
                try:
                    t_val = sheet.cell(r_idx, t_col).value
                except Exception:
                    t_val = ""
                t_parsed = parse_time(t_val)
                if not t_parsed:
                    continue
                if best_time is None:
                    best_time, best_row = t_parsed, r
                else:
                    if ask_earliest and t_parsed < best_time:
                        best_time, best_row = t_parsed, r
                    if ask_latest and t_parsed > best_time:
                        best_time, best_row = t_parsed, r
            if best_row is None:
                return f"Ch∆∞a c√≥ d·ªØ li·ªáu th·ªùi gian h·ª£p l·ªá cho {b}."
            name = best_row.get("H·ªç v√† T√™n","(kh√¥ng t√™n)")
            ms   = best_row.get("MSSV","?")
            kind = "s·ªõm nh·∫•t" if ask_earliest else "mu·ªôn nh·∫•t"
            return f"üë§ {name} ({ms}) l√† ng∆∞·ªùi {kind} trong {b}: {best_time.strftime('%Y-%m-%d %H:%M:%S')}."

        # ------ Intent: Bu·ªïi X <t√™n> c√≥ ƒëi h·ªçc kh√¥ng? (li·ªát k√™ t·∫•t c·∫£ kh·ªõp) ------
        if any(w in qn for w in ["di hoc","ƒëi h·ªçc","co mat","c√≥ m·∫∑t","vang","v·∫Øng","khong","kh√¥ng"]):
            b = extract_buoi(qn, buoi_cols)
            if b:
                name_guess = extract_name_candidate(qn)
                if name_guess:
                    target_norm = lv_norm(name_guess)
                    matches = [r for r in records if target_norm in lv_norm(r.get("H·ªç v√† T√™n",""))]
                    if not matches:
                        names = [r.get("H·ªç v√† T√™n","") for r in records]
                        close = get_close_matches(name_guess, names, n=5, cutoff=0.6)
                        name_map = {n: r for n, r in zip(names, records)}
                        matches = [name_map[n] for n in close]
                    if not matches:
                        return f"Kh√¥ng t√¨m th·∫•y sinh vi√™n n√†o kh·ªõp v·ªõi ‚Äú{name_guess}‚Äù."
                    lines = []
                    for r in matches:
                        flag = "‚úÖ" if str(r.get(b,"")).strip() != "" else "‚ùå"
                        lines.append(f"- {r.get('H·ªç v√† T√™n','(kh√¥ng t√™n)')} ({r.get('MSSV','?')}): {flag} t·∫°i {b}")
                    return f"K·∫øt qu·∫£ cho ‚Äú{name_guess}‚Äù ·ªü {b}:\n" + "\n".join(lines)

        # ------ Th·ªëng k√™ theo bu·ªïi / t·ªïng quan ------
        if any(w in qn for w in ["bao nhieu","ƒëi h·ªçc","di hoc","co mat","c√≥ m·∫∑t","vang","v·∫Øng"]):
            present = {b: sum(1 for r in records if str(r.get(b,"")).strip() != "") for b in buoi_cols}
            b = extract_buoi(qn, buoi_cols)
            if b:
                p = present[b]; a = total_sv - p
                return f"{b}: {p}/{total_sv} c√≥ m·∫∑t, {a} v·∫Øng ({(p/total_sv*100):.1f}%)."
            total_present_all = sum(present.values())
            total_slots = total_sv * len(buoi_cols)
            rate = total_present_all/total_slots*100 if total_slots else 0
            return f"T·ªïng t·∫•t c·∫£ bu·ªïi: {total_present_all}/{total_slots} l∆∞·ª£t c√≥ m·∫∑t (~{rate:.1f}%)."

        # ------ Theo t·ªï ------
        if " to " in f" {qn} " or re.search(r"\bto\b", qn):
            b = extract_buoi(qn, buoi_cols) or buoi_cols[-1]
            target_to = extract_to(qn)
            stats = {}
            for r in records:
                g = str(r.get("T·ªï","")).strip() or "Ch∆∞a r√µ"
                stats.setdefault(g, {"present":0,"absent":0})
                if str(r.get(b,"")).strip() != "":
                    stats[g]["present"] += 1
                else:
                    stats[g]["absent"] += 1
            if target_to and target_to in stats:
                v = stats[target_to]; tot = v["present"]+v["absent"]
                rate = v["present"]/tot*100 if tot else 0
                return f"{b} - T·ªï {target_to}: {v['present']}/{tot} c√≥ m·∫∑t ({rate:.1f}%)."
            lines = []
            for g, v in sorted(stats.items()):
                tot = v["present"]+v["absent"]; rate = v["present"]/tot*100 if tot else 0
                lines.append(f"T·ªï {g}: {v['present']}/{tot} ({rate:.1f}%)")
            return f"üìä {b} theo t·ªï:\n" + "\n".join(lines)

        # ------ M·ªôt sinh vi√™n c·ª• th·ªÉ (MSSV ho·∫∑c t√™n) ------
        if "mssv" in qn or re.search(r"\b[0-9]{7,}\b", qn) or any(k in qn for k in ["sv ","sinh vien","sinhvien"]):
            mssv = extract_mssv(qn)
            target = mssv if mssv else q_raw
            row = find_student_row(records, target)
            if not row:
                return "Kh√¥ng t√¨m th·∫•y sinh vi√™n t∆∞∆°ng ·ª©ng."
            name = row.get("H·ªç v√† T√™n","(kh√¥ng t√™n)")
            ms   = row.get("MSSV","?")
            presents = 0; marks = []
            for b in buoi_cols:
                flag = "‚úÖ" if str(row.get(b,"")).strip() != "" else "‚ùå"
                if flag == "‚úÖ": presents += 1
                marks.append(f"{b}:{flag}")
            return f"{name} ({ms}) ‚Äî {presents}/{len(buoi_cols)} bu·ªïi c√≥ m·∫∑t.\n" + ", ".join(marks)

        # ------ T·ª∑ l·ªá chuy√™n c·∫ßn trung b√¨nh ------
        if "chuyen can" in qn or ("ty le" in qn and "buoi" not in qn):
            total_present_all = sum(sum(1 for r in records if str(r.get(b,"")).strip() != "") for b in buoi_cols)
            total_slots = total_sv * len(buoi_cols)
            rate = total_present_all/total_slots*100 if total_slots else 0
            return f"üìà T·ª∑ l·ªá chuy√™n c·∫ßn trung b√¨nh: {rate:.1f}%."

        # ------ Danh s√°ch v·∫Øng qu√° N bu·ªïi ------
        m = re.search(r"vang\s+qua\s+(\d+)\s*buoi", qn)
        if m:
            limit = int(m.group(1))
            rows = []
            for r in records:
                vangs = sum(1 for b in buoi_cols if str(r.get(b,"")).strip() == "")
                if vangs > limit:
                    rows.append(f"- {r.get('H·ªç v√† T√™n','(kh√¥ng t√™n)')} ({r.get('MSSV','?')}): {vangs} bu·ªïi")
            return "Danh s√°ch v·∫Øng qu√° {} bu·ªïi:\n".format(limit) + ("\n".join(rows) if rows else "Kh√¥ng c√≥.")

        # ------ fallback ------
        return ("ü§î T√¥i ch∆∞a ch·∫Øc √Ω b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi: "
                "‚ÄúAi ƒëi h·ªçc s·ªõm nh·∫•t bu·ªïi 2?‚Äù, ‚ÄúBu·ªïi 1 Th√°i c√≥ ƒëi h·ªçc kh√¥ng?‚Äù, "
                "‚ÄúBu·ªïi 3 c√≥ bao nhi√™u SV ƒëi h·ªçc?‚Äù, ‚ÄúMSSV 5112xxxx ƒëi m·∫•y bu·ªïi?‚Äù")

    if st.button("H·ªèi tr·ª£ l√Ω", use_container_width=True) and q_raw.strip():
        try:
            st.markdown(f"**Tr·∫£ l·ªùi:**\n\n{answer(q_raw)}")
        except Exception as e:
            st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi: {e}")

# ---------- FOOTER (b·∫£n quy·ªÅn, cƒÉn gi·ªØa) ----------
st.markdown(
    """
    <style>
    .footer-dhn {
        position: fixed;
        left: 0; right: 0; bottom: 0;
        padding: 8px 16px;
        background: rgba(0,0,0,0.04);
        color: #444;
        font-size: 12px;
        text-align: center;  /* üëà cƒÉn gi·ªØa */
        z-index: 1000;
        border-top: 1px solid rgba(0,0,0,0.1);
        width: 100%;
    }
    </style>
    <div class="footer-dhn">¬© B·∫£n quy·ªÅn thu·ªôc v·ªÅ <strong>TS. DHN</strong></div>
    """,
    unsafe_allow_html=True
)







