# ---------- TAB TH·ªêNG K√ä ----------
with tab_stats:
    st.subheader("üìä Th·ªëng k√™ ƒëi·ªÉm danh theo bu·ªïi & theo T·ªï")
    try:
        sheet = get_sheet()
        headers = sheet.row_values(1)
        buoi_list = [h for h in headers if h.lower().startswith("bu·ªïi ")]
        buoi_chon = st.selectbox("Ch·ªçn bu·ªïi", buoi_list or ["Bu·ªïi 1"], index=0)
        records = load_records(sheet)

        present, absent = 0, 0
        by_group = {}
        for r in records:
            flag = attendance_flag(r.get(buoi_chon, ""))
            if flag:
                present += 1
            else:
                absent += 1
            group = str(r.get("T·ªï", "")).strip() or "Ch∆∞a r√µ"
            if group not in by_group:
                by_group[group] = {"present": 0, "absent": 0}
            by_group[group]["present" if flag else "absent"] += 1

        # Ch·ªâ s·ªë t·ªïng quan
        c1, c2, c3 = st.columns(3)
        with c1: st.metric("‚úÖ C√≥ m·∫∑t", present)
        with c2: st.metric("‚ùå V·∫Øng", absent)
        with c3:
            total = present + absent
            st.metric("üìà T·ª∑ l·ªá c√≥ m·∫∑t", f"{(present/total*100):.1f}%" if total else "-")

        # Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
        rows = []
        for g, v in sorted(by_group.items()):
            total_g = v["present"] + v["absent"]
            rate = (v["present"]/total_g*100) if total_g else 0.0
            rows.append({
                "T·ªï": g,
                "C√≥ m·∫∑t": v["present"],
                "V·∫Øng": v["absent"],
                "T·ªïng": total_g,
                "T·ª∑ l·ªá (%)": round(rate, 1),
                "Nh√£n": f"{v['present']} ({rate:.1f}%)"
            })
        df = pd.DataFrame(rows)

        # Bi·ªÉu ƒë·ªì c·ªôt: m·ªói t·ªï m·ªôt m√†u + tooltip + nh√£n tr√™n c·ªôt
        if not df.empty:
            base = alt.Chart(df).encode(
                x=alt.X('T·ªï:N', sort=None, title='T·ªï'),
                y=alt.Y('C√≥ m·∫∑t:Q', title='S·ªë SV c√≥ m·∫∑t'),
                color=alt.Color('T·ªï:N', legend=None),
                tooltip=[
                    alt.Tooltip('T·ªï:N', title='T·ªï'),
                    alt.Tooltip('C√≥ m·∫∑t:Q', title='C√≥ m·∫∑t'),
                    alt.Tooltip('V·∫Øng:Q', title='V·∫Øng'),
                    alt.Tooltip('T·ªïng:Q', title='T·ªïng'),
                    alt.Tooltip('T·ª∑ l·ªá (%):Q', title='T·ª∑ l·ªá (%)')
                ]
            )
            bars = base.mark_bar()
            text = base.mark_text(dy=-5).encode(text='Nh√£n:N')
            chart = (bars + text).properties(height=340)
            st.altair_chart(chart, use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")

        # B·∫£ng th·ªëng k√™ d∆∞·ªõi bi·ªÉu ƒë·ªì
        table = []
        for g, v in sorted(by_group.items()):
            total_g = v["present"] + v["absent"]
            rate_g = f"{(v['present']/total_g*100):.1f}%" if total_g else "-"
            table.append({"T·ªï": g, "C√≥ m·∫∑t": v["present"], "V·∫Øng": v["absent"], "T·ª∑ l·ªá c√≥ m·∫∑t": rate_g})
        st.dataframe(table, use_container_width=True)

    except Exception as e:
        st.error(f"‚ùå L·ªói khi l·∫•y th·ªëng k√™: {e}")
